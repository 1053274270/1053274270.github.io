[{"title":"Voronoi版本","url":"/2023/07/16/Voronoi%E7%89%88%E6%9C%AC/","content":"2023.7.11三维沉降算法迁移完成\n2023.7.5增加结果菜单中增加绘图模块，二维大体积比VORONOI界面完成\n2023.6.6abaqus文件拖拽转化为voronoi文件，界面可直接拖拽OUTPUT文件夹\n2023.5.14开始进行修改侧边栏，将单项radiobutton修改为下拉菜单\n2023.3.4添加qt多线程，在子线程里运行沉降算法，提高了计算速度，点击test触发添加190个小球\n2023.1.221.优化添加小球逻辑2.添加记时功能第20次添加小球，总体积8，半径0.12407，200球，体积比为20%，耗时703ms绘制200球耗时14ms绘制1909球耗时134ms删除中间制图时间，通过最后绘制，200球耗时623ms添加190球，降低循环，耗时3024ms\n2022.11.22最初版本\n","categories":[],"tags":[]},{"title":"total stress","url":"/2023/07/16/total%20stress/","content":"1.修改结果路径，触发on_currentPatn_textChangedvoid resultPanal::on_currentPatn_textChanged()\n2.getSteps(currentDir)中读取”&#x2F;STEP.dat”文件，获取totalStep与subStep，然后调用emit addAStep(totalStep, subStep, path);\n3.void Model::addAResultStep(int totalStep, int subStep, QString path)此函数作用为，将每一步stress添加为左侧ControlPanel的TreeWidgetItem，将每一步stress添加至右侧结果栏。\n4.在ControlPanel类的构造函数中\nconnect(treeWidget,SIGNAL(itemPressed(QTreeWidgetItem*,int)),this,SLOT(slotItemPressed(QTreeWidgetItem*,int)));\n\n初始化了左侧ControlPanel的TreeWidgetItem点击时间触发函数\nif(item-&gt;text(0)==&quot;Stress&quot;)&#123;        int currentStep=item-&gt;parent()-&gt;parent()-&gt;indexOfChild(item-&gt;parent());        emit ShowStress(currentStep-1);//由于加了total应力，原来index应减1    &#125;```5.信号槽传至下面函数```c++void Model::ShowStresscontrolPanal(int step)&#123;    if(!ResultisReady) return;    currentStep = step;    mystepResult[currentStep]-&gt;setShowStress();    setStepTab(mystepResult[currentStep]);&#125;\n\n\n6.setStepTab(mystepResult[currentStep]);\nvoid Model::setStepTab(ResultStep *step)&#123;    int stepTabState = stepTabExisted(step);    qDebug()&lt;&lt;&quot;stepTabState:&quot;&lt;&lt;stepTabState;    if(stepTabState == -1)&#123;        mystepResult[currentStep]-&gt;openOpenGL();        CentralTabWidget-&gt;addTab(step-&gt;myOpenGL, step-&gt;name);        int num_tab = CentralTabWidget-&gt;count()-1;        CentralTabWidget-&gt;setCurrentIndex(num_tab);    &#125;else if(CentralTabWidget-&gt;tabText(CentralTabWidget-&gt;currentIndex())!=             mystepResult[currentStep]-&gt;name)&#123;        CentralTabWidget-&gt;setCurrentIndex(stepTabState);    &#125;else &#123;        showResult();  //根据当前载荷步currentStep和mystepResult[currentStep]-&gt;showType显示结果    &#125;&#125;\n\n7.showResult();\nvoid Model::showResult()&#123;    switch (mystepResult[currentStep]-&gt;showType) &#123;    case 1:        showStress();        break;    case 2:        showStrain();        break;    case 3:        showDeformation();        break;    default:        break;    &#125;    return;&#125;\n\n8.void Model::showStress()\nvoid Model::showStress()&#123;    if(!ResultisReady) return;    if(!actionStress_Condition-&gt;isChecked())&#123;        actionStress_Condition-&gt;setChecked(true);    &#125;else &#123;        openResult( pProgressBar);        myresultPanal-&gt;setResultTab(1,mystepResult[currentStep]-&gt;deformation-&gt;IFLAG_Dimension);        updateResultPanal();            //更新后处理控制面板        //outputText(&quot;111111&quot;);        //mystepResult[currentStep]-&gt;myOpenGL-&gt;update();    &#125;&#125;\n\n9.void Model::openResult( QProgressBar *pProgressBar)\nvoid Model::openResult( QProgressBar *pProgressBar)&#123;    if(0&lt;=currentStep &amp;&amp; currentStep&lt;mystepResult.size())&#123;        mystepResult[currentStep]-&gt;openResult( pProgressBar);        if(mystepResult[currentStep]-&gt;deformation!=nullptr)            myresultPanal-&gt;setModelRange(                    mystepResult[currentStep]-&gt;deformation-&gt;modelRange);        ShowResult = true;        ResetView();    &#125;    return;&#125;\n\n10.mystepResult[currentStep]-&gt;openResult( pProgressBar);\nvoid ResultStep::openResult( QProgressBar *pProgressBar)&#123;    QVector&lt;STRU_Member&gt; *element;    QVector&lt;gNode&gt; *node;    QVector&lt;co&gt; *deform;    switch (showType) &#123;    case 1:        if(deformation!=nullptr)            deformation-&gt;openDeformation(pProgressBar);        element = &amp;(deformation-&gt;element);        node = &amp;(deformation-&gt;allNode.node);        deform = &amp;(deformation-&gt;deformation);        if(stress!=nullptr)            stress-&gt;openResult(pProgressBar, element, node,                               deform);        break;    case 2:        if(deformation!=nullptr)            deformation-&gt;openDeformation(pProgressBar);        element = &amp;(deformation-&gt;element);        node = &amp;(deformation-&gt;allNode.node);        deform = &amp;(deformation-&gt;deformation);        if(strain!=nullptr)            strain-&gt;openResult(pProgressBar, element, node,                               deform);        break;    case 3:        if(deformation!=nullptr)            deformation-&gt;openDeformation(pProgressBar);        break;    default:        break;    &#125;    if(myOpenGL==nullptr) return;    myOpenGL-&gt;modelRange.enlarge(deformation-&gt;modelRange,0.0,0,0,0);    /*myOpenGL-&gt;modelRange = deformation-&gt;modelRange;    myOpenGL-&gt;modelRange.x.min = deformation-&gt;modelRange.x.min-            (deformation-&gt;modelRange.x.max-deformation-&gt;modelRange.x.min)*0.2;    myOpenGL-&gt;modelRange.y.min = deformation-&gt;modelRange.y.min;*/    myOpenGL-&gt;update();    return;&#125;\n\n11.deformation-&gt;openDeformation(pProgressBar);\nbool Deformation::openDeformation(QProgressBar *pProgressBar)\n\n12.stress-&gt;openResult(pProgressBar, element, node,deform);\nbool ResultStr::openResult(QProgressBar *pProgressBar,                           QVector&lt;STRU_Member&gt; *element,                           QVector&lt;gNode&gt; *node,                           QVector&lt;co&gt; *deformation)\n\n","categories":[],"tags":[]},{"title":"liu","url":"/2023/07/15/liu/","content":"asdsadasda\n","categories":[],"tags":[]},{"title":"first","url":"/2023/07/15/first/","content":"hexo claen &amp;&amp; hexo g &amp;&amp; hexo s\n","categories":[],"tags":[]},{"title":"Hello World","url":"/2023/07/15/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","categories":[],"tags":[]}]