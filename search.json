[{"title":"Voronoi版本","url":"/2023/07/16/Voronoi%E7%89%88%E6%9C%AC/","content":" 2023.7.11\n三维沉降算法迁移完成\n 2023.7.5\n增加结果菜单中增加绘图模块，二维大体积比VORONOI界面完成\n 2023.6.6\nabaqus文件拖拽转化为voronoi文件，界面可直接拖拽OUTPUT文件夹\n 2023.5.14\n开始进行修改侧边栏，将单项radiobutton修改为下拉菜单\n 2023.3.4\n添加qt多线程，在子线程里运行沉降算法，提高了计算速度，点击test触发添加190个小球\n 2023.1.22\n1.优化添加小球逻辑\n2.添加记时功能\n\n第20次添加小球，总体积8，半径0.12407，200球，体积比为20%，耗时703ms\n绘制200球耗时14ms\n绘制1909球耗时134ms\n删除中间制图时间，通过最后绘制，200球耗时623ms\n添加190球，降低循环，耗时3024ms\n 2022.11.22\n最初版本\n","categories":[],"tags":[]},{"title":"total stress","url":"/2023/07/16/total%20stress/","content":"1.修改结果路径，触发on_currentPatn_textChanged\nvoid resultPanal::on_currentPatn_textChanged()\n2.getSteps(currentDir)中读取&quot;/STEP.dat&quot;文件，获取totalStep与subStep，然后调用\nemit addAStep(totalStep, subStep, path);\n3.void Model::addAResultStep(int totalStep, int subStep, QString path)\n此函数作用为，将每一步stress添加为左侧ControlPanel的TreeWidgetItem，将每一步stress添加至右侧结果栏。\n4.在ControlPanel类的构造函数中\nconnect(treeWidget,SIGNAL(itemPressed(QTreeWidgetItem*,int)),this,SLOT(slotItemPressed(QTreeWidgetItem*,int)));\n\n初始化了左侧ControlPanel的TreeWidgetItem点击时间触发函数\nif(item-&gt;text(0)==&quot;Stress&quot;)&#123;\n        int currentStep=item-&gt;parent()-&gt;parent()-&gt;indexOfChild(item-&gt;parent());\n        emit ShowStress(currentStep-1);//由于加了total应力，原来index应减1\n    &#125;```\n\n5.信号槽传至下面函数\n```c++\nvoid Model::ShowStresscontrolPanal(int step)\n&#123;\n    if(!ResultisReady) return;\n    currentStep = step;\n    mystepResult[currentStep]-&gt;setShowStress();\n    setStepTab(mystepResult[currentStep]);\n&#125;\n\n6.setStepTab(mystepResult[currentStep]);\nvoid Model::setStepTab(ResultStep *step)\n&#123;\n    int stepTabState = stepTabExisted(step);\n    qDebug()&lt;&lt;&quot;stepTabState:&quot;&lt;&lt;stepTabState;\n    if(stepTabState == -1)&#123;\n        mystepResult[currentStep]-&gt;openOpenGL();\n        CentralTabWidget-&gt;addTab(step-&gt;myOpenGL, step-&gt;name);\n        int num_tab = CentralTabWidget-&gt;count()-1;\n        CentralTabWidget-&gt;setCurrentIndex(num_tab);\n    &#125;else if(CentralTabWidget-&gt;tabText(CentralTabWidget-&gt;currentIndex())!=\n             mystepResult[currentStep]-&gt;name)&#123;\n        CentralTabWidget-&gt;setCurrentIndex(stepTabState);\n    &#125;else &#123;\n        showResult();  //根据当前载荷步currentStep和mystepResult[currentStep]-&gt;showType显示结果\n    &#125;\n&#125;\n\n7.showResult();\nvoid Model::showResult()\n&#123;\n    switch (mystepResult[currentStep]-&gt;showType) &#123;\n    case 1:\n        showStress();\n        break;\n    case 2:\n        showStrain();\n        break;\n    case 3:\n        showDeformation();\n        break;\n    default:\n        break;\n    &#125;\n    return;\n&#125;\n\n8.void Model::showStress()\nvoid Model::showStress()\n&#123;\n    if(!ResultisReady) return;\n\n    if(!actionStress_Condition-&gt;isChecked())&#123;\n        actionStress_Condition-&gt;setChecked(true);\n    &#125;else &#123;\n        openResult( pProgressBar);\n        myresultPanal-&gt;setResultTab(1,mystepResult[currentStep]-&gt;deformation-&gt;IFLAG_Dimension);\n        updateResultPanal();            //更新后处理控制面板\n        //outputText(&quot;111111&quot;);\n        //mystepResult[currentStep]-&gt;myOpenGL-&gt;update();\n    &#125;\n&#125;\n\n9.void Model::openResult( QProgressBar *pProgressBar)\nvoid Model::openResult( QProgressBar *pProgressBar)\n&#123;\n    if(0&lt;=currentStep &amp;&amp; currentStep&lt;mystepResult.size())&#123;\n        mystepResult[currentStep]-&gt;openResult( pProgressBar);\n        if(mystepResult[currentStep]-&gt;deformation!=nullptr)\n            myresultPanal-&gt;setModelRange(\n                    mystepResult[currentStep]-&gt;deformation-&gt;modelRange);\n        ShowResult = true;\n        ResetView();\n    &#125;\n    return;\n&#125;\n\n10.mystepResult[currentStep]-&gt;openResult( pProgressBar);\nvoid ResultStep::openResult( QProgressBar *pProgressBar)\n&#123;\n    QVector&lt;STRU_Member&gt; *element;\n    QVector&lt;gNode&gt; *node;\n    QVector&lt;co&gt; *deform;\n\n    switch (showType) &#123;\n    case 1:\n        if(deformation!=nullptr)\n            deformation-&gt;openDeformation(pProgressBar);\n        element = &amp;(deformation-&gt;element);\n        node = &amp;(deformation-&gt;allNode.node);\n        deform = &amp;(deformation-&gt;deformation);\n        if(stress!=nullptr)\n            stress-&gt;openResult(pProgressBar, element, node,\n                               deform);\n        break;\n    case 2:\n        if(deformation!=nullptr)\n            deformation-&gt;openDeformation(pProgressBar);\n        element = &amp;(deformation-&gt;element);\n        node = &amp;(deformation-&gt;allNode.node);\n        deform = &amp;(deformation-&gt;deformation);\n        if(strain!=nullptr)\n            strain-&gt;openResult(pProgressBar, element, node,\n                               deform);\n        break;\n    case 3:\n        if(deformation!=nullptr)\n            deformation-&gt;openDeformation(pProgressBar);\n        break;\n    default:\n        break;\n    &#125;\n    if(myOpenGL==nullptr) return;\n    myOpenGL-&gt;modelRange.enlarge(deformation-&gt;modelRange,0.0,0,0,0);\n    /*myOpenGL-&gt;modelRange = deformation-&gt;modelRange;\n    myOpenGL-&gt;modelRange.x.min = deformation-&gt;modelRange.x.min-\n            (deformation-&gt;modelRange.x.max-deformation-&gt;modelRange.x.min)*0.2;\n    myOpenGL-&gt;modelRange.y.min = deformation-&gt;modelRange.y.min;*/\n    myOpenGL-&gt;update();\n    return;\n&#125;\n\n11.deformation-&gt;openDeformation(pProgressBar);\nbool Deformation::openDeformation(QProgressBar *pProgressBar)\n\n12.stress-&gt;openResult(pProgressBar, element, node,deform);\nbool ResultStr::openResult(QProgressBar *pProgressBar,\n                           QVector&lt;STRU_Member&gt; *element,\n                           QVector&lt;gNode&gt; *node,\n                           QVector&lt;co&gt; *deformation)\n\n","categories":[],"tags":[]},{"title":"liu","url":"/2023/07/15/liu/","content":"asdsadasda\n\n","categories":[],"tags":[]},{"title":"Hello World","url":"/2023/07/15/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\n Quick Start\nhexo claen &amp;&amp; hexo g &amp;&amp; hexo s\n\n Create a new post\n$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\n Run server\n$ hexo server\n\nMore info: Server\n Generate static files\n$ hexo generate\n\nMore info: Generating\n Deploy to remote sites\n$ hexo deploy\n\nMore info: Deployment\n","categories":[],"tags":[]},{"title":"材料力学","url":"/2023/07/15/%E6%9D%90%E6%96%99%E5%8A%9B%E5%AD%A6/","content":" 材料力学\n 拉伸与压缩\n\nσ=FNAσ=\\frac{F_N}{A}σ=AFN​​\nε=Δllε=\\frac{Δl}{l}ε=lΔl​\nσ=Eεσ=Eεσ=Eε\nυ=ε′ευ=\\frac{ε&#x27;}{ε}υ=εε′​\n\n 扭转\n\nτmax=TWpτ_{max}=\\frac{T}{W_p}τmax​=Wp​T​\nτ=MeyIpτ=\\frac{M_ey}{I_p}τ=Ip​Me​y​\n\n\n 弯曲应力与弯曲变形\n\n剪力与弯矩：使微段有顺时针运动趋势的剪力为正、使微段为凹状态（上压下拉）的弯矩为正\n剪力弯矩图：从左往右看，向上剪力在图中加，顺时针弯矩在图中加。弯矩求导等于剪力，剪力求导等于荷载集度\nσmax=MWσ_{max}=\\frac{M}{W}σmax​=WM​\nσ=MyIzσ=\\frac{My}{I_z}σ=Iz​My​\n\n 应力状态分析\n平面应力状态\n$σ_α=\\frac&#123;σ_x+σ_y&#125;&#123;2&#125;+\\frac&#123;σ_x-σ_y&#125;&#123;2&#125;cos2α-τ_xsin2α$\n$τ_α=\\frac&#123;σ_x-σ_y&#125;&#123;2&#125;sin2α+τ_xcos2α$\n$σ=\\frac&#123;σ_x+σ_y&#125;&#123;2&#125;±\\sqrt&#123;(\\frac&#123;σ_x-σ_y&#125;&#123;2&#125;)^2+τ^2&#125;$\n$2α=arctan(\\frac&#123;-2τ_x&#125;&#123;σ_x-σ_y&#125;)$\n应力圆\n第三强度理论\n第四强度理论\n 压杆稳定\n 组合变形\n拉压、扭转、弯曲组合\n不同平面的弯矩通过$\\sqrt&#123;M_y+M_z&#125;$求出，在同一方向上应力加减。\n 能量法\n 动载荷\n 截面性质\n\n矩形截面，宽b，高h：$I_z=\\frac&#123;bh^3&#125;&#123;12&#125;$\n实心圆截面，直径D：$I_z=\\frac&#123;\\pi D^4&#125;&#123;64&#125;$    $W=\\frac&#123;\\pi D^3&#125;&#123;32&#125;$     $I_p=\\frac&#123;\\pi D^4&#125;&#123;32&#125;$     $W_p=\\frac&#123;\\pi D^3&#125;&#123;16&#125;$\n空心圆截面，外径D，内径d，$\\alpha=\\frac&#123;d&#125;&#123;D&#125;$：$I_z=\\frac&#123;\\pi D^4(1-\\alpha^4)&#125;&#123;64&#125;$    $W=\\frac&#123;\\pi D^3(1-\\alpha^4)&#125;&#123;32&#125;$     $I_p=\\frac&#123;\\pi D^4(1-\\alpha^4)&#125;&#123;32&#125;$     $W_p=\\frac&#123;\\pi D^3(1-\\alpha^4)&#125;&#123;16&#125;$\n\n 注意事项\n\n做开方运算时，式中单位需转为标准单位。\n\n\n","categories":[],"tags":[]}]